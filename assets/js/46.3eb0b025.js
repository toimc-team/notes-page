(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{1173:function(t,e,a){"use strict";a.r(e);var _=a(11),v=Object(_.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"状态管理概览"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#状态管理概览"}},[t._v("#")]),t._v(" 状态管理概览")]),t._v(" "),e("p",[t._v("无状态组件：是不可变的，这意味着它们的属性不能改变，所有的值都是最终的。")]),t._v(" "),e("p",[t._v("有状态组件：持有状态可能在Widget生命周期中发生变化。实现一个StatefulWidget至少需要两个类：一个StatefulWidget类，一个State类")]),t._v(" "),e("p",[e("strong",[t._v("Flutter中三种推荐的状态管理方案")]),t._v("：")]),t._v(" "),e("ul",[e("li",[t._v("Redux： redux，flutter_redux")]),t._v(" "),e("li",[t._v("ScopedModel：scoped_model")]),t._v(" "),e("li",[t._v("Bloc：bloc，flutter_bloc")])]),t._v(" "),e("p",[t._v("前面的是方案，后面的是对应的pub.dev中的第三方包名。")]),t._v(" "),e("h2",{attrs:{id:"前置知识"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前置知识"}},[t._v("#")]),t._v(" 前置知识")]),t._v(" "),e("p",[t._v("状态管理主要的目的是解决：组件间状态传递。在学习之前，扩展一些基础的知识。")]),t._v(" "),e("h3",{attrs:{id:"安装第三方包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装第三方包"}},[t._v("#")]),t._v(" 安装第三方包")]),t._v(" "),e("p",[t._v("两种安装方式：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("flutter pub add [package-name]")]),t._v("：直接安装最新的包")]),t._v(" "),e("li",[t._v("在"),e("code",[t._v("pubspec.yaml")]),t._v("的"),e("code",[t._v("dependencies")]),t._v("中添加对应的包与版本，再使用"),e("code",[t._v("flutter pub get")]),t._v("安装；")])]),t._v(" "),e("blockquote",[e("p",[t._v("说明：为了学习体验一致，建议使用第二种，以免由于版本带来的兼容性问题。")])]),t._v(" "),e("h3",{attrs:{id:"类及构造函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类及构造函数"}},[t._v("#")]),t._v(" 类及构造函数")]),t._v(" "),e("p",[t._v("定义类：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class Demo {\n  final int count;\n  // 定义构造函数\n  Demo(this.count)\n}\n")])])]),e("p",[t._v("可以在书写了"),e("code",[t._v("final int count")]),t._v("之后，使用VSCode的快捷菜单创建：")]),t._v(" "),e("p",[e("img",{attrs:{src:a(779),alt:"image-20210921185652112"}})]),t._v(" "),e("p",[t._v("即是如下的菜单：")]),t._v(" "),e("p",[e("img",{attrs:{src:a(780),alt:"image-20210921185716680"}})]),t._v(" "),e("p",[t._v("其中的"),e("code",[t._v("Demo(this.count)")]),t._v("是Dart中的语法糖，也可以如下进行定义：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class Demo {\n  int count = 0;\n\n  Demo(int count) {\n    this.count = count;\n  }\n}\n\n// 其中this.count中的this可以省略\nclass Demo {\n  int count = 0;\n\n  Demo(int count) {\n    count = count; // 这一行是不是看起来非常的多余，括号中的count是一个形参，是外部传递进来的，等号左边的count是Demo类中的公有成员。\n  }\n}\n")])])]),e("p",[t._v("上面的写法太多余了，所以推荐使用语法糖的写法："),e("code",[t._v("Demo(this.count)")])]),t._v(" "),e("h3",{attrs:{id:"命名式构造函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#命名式构造函数"}},[t._v("#")]),t._v(" 命名式构造函数")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class Demo {\n  final int count = 0;\n\n  Demo(this.count)\n  // 命名式构造函数\n  Demo.iniState() : count = 0;\n}\n")])])]),e("h3",{attrs:{id:"可选参数与必传参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#可选参数与必传参数"}},[t._v("#")]),t._v(" 可选参数与必传参数")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class Demo {\n  final int count;\n\n  Demo(this.count);\n}\n")])])]),e("p",[t._v("这个地方的count就是一个必传参数：")]),t._v(" "),e("p",[e("img",{attrs:{src:a(781),alt:"image-20210921194016562"}})]),t._v(" "),e("p",[t._v("可以省略"),e("code",[t._v("new")]),t._v("关键字：")]),t._v(" "),e("p",[e("img",{attrs:{src:a(782),alt:"image-20210921194104681"}})]),t._v(" "),e("p",[t._v("设置成可选参数：")]),t._v(" "),e("p",[e("img",{attrs:{src:a(783),alt:"image-20210921194128527"}})]),t._v(" "),e("p",[t._v("注意：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("设置成可选参数之后，需要通过属性名才能设置参数的值；")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class Demo {\n  final int? count;\n\n  Demo({this.count});\n}\n\nvar demo = Demo(count: 0);\n")])])])]),t._v(" "),e("li",[e("p",[t._v("可以在申明的类型之后使用"),e("code",[t._v("?")]),t._v("来告诉dart的编译器这里是一个可选的属性，从而跳过"),e("code",[t._v("null")]),t._v("值检查；")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class Demo {\n  final int? count;\n\n  Demo({this.count});\n}\n")])])])]),t._v(" "),e("li",[e("p",[t._v("也可以添加一个"),e("code",[t._v("required")]),t._v("带表是必传参数：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class Demo {\n  final int count;\n\n  Demo({required this.count});\n}\n")])])])])]),t._v(" "),e("h2",{attrs:{id:"应用场景与优缺点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#应用场景与优缺点"}},[t._v("#")]),t._v(" 应用场景与优缺点")]),t._v(" "),e("h3",{attrs:{id:"_1-redux"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-redux"}},[t._v("#")]),t._v(" 1. Redux")]),t._v(" "),e("p",[t._v("优点")]),t._v(" "),e("p",[t._v("Redux允许集中管理一个状态，因为只有Reducers可以完成从一个状态到另一个状态的转换。\n在流程中插入中间件的便利性也是一种优势。例如，如果需要不断地验证与服务器的连接性或跟踪活动。")]),t._v(" "),e("p",[t._v("缺点")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("一个单一的Store和一个巨大的State（如果你想坚持Redux的良好做法）。")])]),t._v(" "),e("li",[e("p",[t._v('在Reducer和MiddleWare的层面上，有太多的 "如果......那么 "的比较。')])]),t._v(" "),e("li",[e("p",[t._v("重建次数太多(每次State发生变化时)")])])]),t._v(" "),e("p",[t._v("应用场景：")]),t._v(" "),e("ul",[e("li",[t._v("熟悉React，Redux，有之前的Redux的概念的学习；")]),t._v(" "),e("li",[t._v("state功能模块不多，并且页面中不需要高性能刷新：例如，用户认证、购物车、等......")])]),t._v(" "),e("p",[t._v("不推荐使用的场景：")]),t._v(" "),e("p",[t._v("当你需要处理某个东西的多个实例，并且每个实例都有自己的状态时，我不推荐使用Redux。")]),t._v(" "),e("h3",{attrs:{id:"_2-scopedmodel"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-scopedmodel"}},[t._v("#")]),t._v(" 2. ScopedModel")]),t._v(" "),e("p",[t._v("优点")]),t._v(" "),e("ul",[e("li",[t._v("ScopedModel可以很容易地将Model和它的逻辑重组在一个位置。")]),t._v(" "),e("li",[t._v("ScopedModel不需要任何Streams概念的知识，这使得初学者更容易实现。")]),t._v(" "),e("li",[t._v("ScopedModel既可以用于全局逻辑，也可以用于局部逻辑。")]),t._v(" "),e("li",[t._v("ScopedModel不限于State管理。")])]),t._v(" "),e("p",[t._v("缺点")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("ScopedModel并没有提供任何方法让代码知道Model的哪个部分发生了变化，并导致ScopedModelDescendant被调用。")])]),t._v(" "),e("li",[e("p",[t._v("太多的（重新）构建。")]),t._v(" "),e("p",[t._v("每当一个Model通知它的监听器时，所有与该Model相关的东西都会重新构建（AnimatedBuilder, InheritedWidget...）。")])]),t._v(" "),e("li",[e("p",[t._v("需要使用外部软件包，但有可能随着软件包的发展而发生中断变化。")])])]),t._v(" "),e("p",[t._v("应用场景")]),t._v(" "),e("ul",[e("li",[t._v("当开发者对Streams不是很熟悉时")]),t._v(" "),e("li",[t._v("当模型不是太复杂时")])]),t._v(" "),e("p",[t._v("不推荐使用的场景：")]),t._v(" "),e("ul",[e("li",[t._v("当应用程序出于性能考虑，需要减少构建次数时。")]),t._v(" "),e("li",[t._v("当一个应用程序需要精确地知道模型的哪一部分已经改变了。")])]),t._v(" "),e("h3",{attrs:{id:"_3-bloc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-bloc"}},[t._v("#")]),t._v(" 3. BLoC")]),t._v(" "),e("p",[t._v("优点")]),t._v(" "),e("ul",[e("li",[t._v("BLoC可以轻松地将业务逻辑重新组合到一个位置。")]),t._v(" "),e("li",[t._v("BLoC可以很容易地精确确定任何变化的性质（通过其输出接口，基于流）。")]),t._v(" "),e("li",[t._v("由于使用了 StreamBuilder 小工具，BLoC 可以很容易地将（重新）构建的数量限制在最低限度。")]),t._v(" "),e("li",[t._v("流的使用是非常强大的，并打开了许多行动的大门（转换，独特，debounce...）。")]),t._v(" "),e("li",[t._v("BLoCs可用于全局和局部逻辑。")]),t._v(" "),e("li",[t._v("基本BLoC不限于状态管理")]),t._v(" "),e("li",[t._v("不需要使用任何外部软件包。")])]),t._v(" "),e("p",[t._v("缺点：")]),t._v(" "),e("p",[t._v("对于初学者来说，开始使用BLoC是比较困难的，因为它需要额外了解Flutter的实际工作方式。")]),t._v(" "),e("p",[t._v("应用场景：")]),t._v(" "),e("p",[t._v("几乎所有的场景都可以使用，分cubit与bloc")]),t._v(" "),e("p",[t._v("不推荐使用的场景：")]),t._v(" "),e("ul",[e("li",[t._v("单一的state，没有太多性能的需求，直接使用scoped_model即可")]),t._v(" "),e("li",[t._v("功能比较单一，父子页面传参，没有跨层级；")])])])}),[],!1,null,null,null);e.default=v.exports},779:function(t,e,a){t.exports=a.p+"assets/img/image-20210921185652112.5cb54839.png"},780:function(t,e,a){t.exports=a.p+"assets/img/image-20210921185716680.732c6f85.png"},781:function(t,e,a){t.exports=a.p+"assets/img/image-20210921194016562.0cdd1939.png"},782:function(t,e,a){t.exports=a.p+"assets/img/image-20210921194104681.586dd717.png"},783:function(t,e,a){t.exports=a.p+"assets/img/image-20210921194128527.62f29be5.png"}}]);